using Graphs
using LinearAlgebra
"""
Return the full stabilizer group represented by a generating set.

Starting with a Tableau of 2^n n-qubit Pauli operators(where n is the size of 
Stabilizer s), multiply each one by a different subset of the elements in s to 
create all 2^n unique elements in the group generated by s, then return the Tableau.

```jldoctest
julia> groupify(S"XZ ZX")
+ __
+ XZ
+ ZX
+ YY
```
"""
function groupify(s::Stabilizer)
    n = length(s)
    group = zero(Tableau, 2^n, nqubits(s))
    for i in 0:2^n-1
        for (digit_order, j) in enumerate(digits(i, base=2, pad=n))
            if j == 1
                group[i+1] *= s[digit_order]
            end
        end
    end
    return group 
end


"""
For a non-necessarily-minimal generating set,
return the minimal generating set. Only real phases are permitted.

Canonicalize Stabilizer s, then return a Stabilizer with all non-identity Pauli operators 
in the result. If s consists of only identity operators, return the negative 
identity operator if one is contained in s, and the positive identity operator otherwise.

```jldoctest
julia> minimal_generating_set(S"__ XZ ZX YY")
+ XZ
+ ZX

julia> minimal_generating_set(S"__ XZ ZX iYY")
+ XZ
+ ZX
```
"""
function minimal_generating_set(s::Stabilizer) 
    s, _, r = canonicalize!(copy(s), ranks=true)
    if r == 0
        gs = zero(Stabilizer, 1, nqubits(s))
        if 0x02 in phases(s)
            gs[1] = -1 * gs[1]
        end
        return gs
    else
        return s[1:r, :]
    end
end
"""
Return the full Pauli group of a given length. Phases besides + are ignored by default, 
but can be included by setting phases = true.

Create a 4^n length Tableau, if phases is set to true create a 4^(n+1) length Tableau.Iterate 
through the product of n tuples each containing single Pauli operator, with each element in the 
product being a different tuple of n single Pauli operators representing an n-qubit Pauli operator. 
For each element in the product, place it in a Tableau. If phases is set to true, add the other phases
by multiplying the + phase PauliOperators by phase factors. Finally, return the Tableau

'''jldoctest
julia> pauligroup(2)
+ __
+ X_
+ Z_
+ Y_
 ⋮
+ XY
+ ZY
+ YY

julia> pauligroup(2, phases = true)
+ __
+ X_
+ Z_
+ Y_
 ⋮
-iXY
-iZY
-iYY
'''
"""
function pauligroup(n; phases=false)
    if phases
        s = zero(Tableau, 4^(n + 1), n)
        paulis = ((false, false), (true, false), (false, true), (true, true))
        for (i, P) in enumerate(Iterators.product(Iterators.repeated(paulis, n)...))
            for (j, p) in enumerate(P)
                s[i, j] = p
            end
        end
        for i in 1:4^n
            s[i+4^n] = -1 * s[i]
        end
        for i in 4^n:2*4^n
            s[i+4^n] = -1im * s[i]
        end
        for i in 2*4^n:3*4^n
            s[i+4^n] = -1 * s[i]
        end
    end
    if !phases
        s = zero(Tableau, 4^n, n)
        paulis = ((false, false), (true, false), (false, true), (true, true))
        for (i, P) in enumerate(Iterators.product(Iterators.repeated(paulis, n)...))
            for (j, p) in enumerate(P)
                s[i, j] = p
            end
        end
    end
    return s
end

"""
Return all Pauli operators with the same number of qubits as the given Stabilizer that commute with all 
operators in the Stabilizer.

For each PauliOperator p in the with same number of qubits as the Stabilizer s, iterate through s and check each 
operators commutivity with p. If they all commute, add p a vector of PauliOperators. Return the vector 
converted to Tableau.

'''jldoctest
julia>normalizer(S"X")
+ _
+ X
'''
"""
function normalizer(t::Tableau)
    n = nqubits(t)
    pgroup = pauligroup(n, phases=true)
    ptype = typeof(t[1])
    normalizer = ptype[]
    for p in pgroup
        commutes = true
        for q in t
            if comm(p, q) == 0x01
                commutes = false
            end
        end
        if commutes
            push!(normalizer, p)
        end
    end

    return Tableau(normalizer)
end

"""
For a given set of Paulis, return the subset of Paulis that commute with all Paulis in set.

For each PauliOperator p in given Tableau t, iterate through t and check each operator's commutivity with p. 
If they all commute with p, add p to a vector of PauliOperators. Return the vector converted to a Tableau.

'''jldoctest
julia>centralizer(Tableau([P"XX", P"ZZ", P"_Z"]))
+ ZZ
'''
"""
function centralizer(t::Tableau) 
    center = typeof(t[1])[]
    for P in t
        commutes = 0
        for Q in t
            if comm(P, Q) == 0x01
                commutes = 1
                break
            end
        end
        if commutes == 0
            push!(center, P)
        end
    end
    if length(center) == 0 
        return Tableau(zeros(Bool, 1,1))
    end
    c = Tableau(center)
    return c
end

"""
Return the subset of Paulis in a Stabilizer that have identity operators on all qubits corresponding to 
the given subset, without the entries corresponding to subset.

Iterates through each Pauli p in the group represented by the given Stabilizer s and check if 
p has identity operators on all qubits corresponding to subset. If so, add p to a vector of Paulis. 
Return the vector convterted to Tableau.

'''jldoctest
julia> contractor(S"_X X_", [1])
+ _
+ X
'''
"""
function contractor(s::Stabilizer, subset)
    result = typeof(s[1])[]
    for p in groupify(s)
        contractable = true
        for i in subset
            if p[i] != (false, false) 
                contractable = false 
                break 
            end
        end
        if contractable push!(result, p[setdiff(1:length(p), subset)]) end
    end
    return Tableau(result)
end   

"""
Return the given stabilizer without all the qubits in the given iterable.

Constructs an iterable containing the remaining qubits by taking the difference
between the given set of qubits and the qubits in the given Stabilizer. Then return 
the part of the given Stabilizer with the remaining vertical indices.

'''jldoctest
julia> delete(S"XYZ YZX ZXY", [1,3])
+ Y
+ Z
+ X
'''
"""
function delete(𝒮::Stabilizer, subset)
    return 𝒮[:, setdiff(1:nqubits(𝒮), subset)]
end



